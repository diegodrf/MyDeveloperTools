@attribute [Route(RouteConstant.TemperatureConverter)]
@inject ITemperatureConverter _temperatureConverter
@using MyDeveloperTools.Core.Enums

<PageTitle>@_title</PageTitle>

<MudGrid>
    <MudItem xs="12" Class="d-flex justify-center">
        <MudRadioGroup @bind-SelectedOption="SelectedType">
            <MudRadio Option="@(TemperatureConverterType.CelsiusToFahrenheit)" Color="Color.Primary">Celsius to Fahrenheit</MudRadio>
            <MudRadio Option="@(TemperatureConverterType.FahrenheitToCelsius)" Color="Color.Primary">Fahrenheit to Celsius</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs="12">
        <MudNumericField Variant="Variant.Outlined"
                        Step="0.1"
                         @bind-Value="_value"></MudNumericField>
    </MudItem>
    <MudItem xs="12" Class="d-flex justify-center">
        <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" OnClick="Execute">Convert</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudNumericField Variant="Variant.Outlined"
                         ReadOnly=true
                         @bind-Value="_result"></MudNumericField>
    </MudItem>
</MudGrid>

@code {
    private string _title = RouteConstant.TemperatureConverter.GetPathTitle();
    private double _value = 0;
    private double? _result = null;
    private TemperatureConverterType _selectedType = TemperatureConverterType.CelsiusToFahrenheit;
    public TemperatureConverterType SelectedType
    {
        get
        {
            return _selectedType;
        }
        set
        {
            _value = 0;
            _result = null;
            _selectedType = value;

        }
    }

    private void Execute()
    {
        if(_selectedType == TemperatureConverterType.CelsiusToFahrenheit)
        {
            _result = _temperatureConverter.CelsiusToFahrenheit(_value);
        }
        else
        {
            _result = _temperatureConverter.FahrenheitToCelsius(_value);
        }

    }
}
